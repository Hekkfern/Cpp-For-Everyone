######################
Operator precedence
######################

Order of operators
********************

An expression that has multiple operators is called a compound expression. In order to evaluate this compound expression, we must understand both what the operators do, and the correct order to apply them. The order in which operators are evaluated in a compound expression is determined by an operator's precedence.

In C++, when the compiler encounters an expression, it must similarly analyze the expression and determine how it should be evaluated. To assist with this, all operators are assigned a level of precedence. Operators with the highest level of precedence are evaluated first.

Operator associativity
***********************

What happens if two operators in the same expression have the same precedence level? For example, in the expression ``3 * 4 / 2``, the multiplication and division operators are both precedence level 5. In this case, the compiler can't rely upon precedence alone to determine how to evaluate the result.

If two operators with the same precedence level are adjacent to each other in an expression, the operator's associativity tells the compiler whether to evaluate the operators from left to right or from right to left.

Table of operators
*******************

The below table shows the precedence or associativity rules for every operator in C++ language.

Notes:

* Precedence level 1 is the highest precedence level, and level 17 is the lowest. Operators with a higher precedence level get evaluated first.
* L->R means left to right associativity.
* R->L means right to left associativity.

+-----------+----------------------+------------------------------------+-------------------------------------------+
| Prec/Ass  | Operator             | Description                        | Pattern                                   |
+===========+======================+====================================+===========================================+
| 1 L->R    | ``::``               | Global scope (unary)               | ``::name``                                |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``::``               | Namespace scope (binary)           | ``class_name::member_name``               |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 2 L->R    | ``()``               | Parentheses                        | ``(expression)``                          |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``()``               | Function call                      | ``function_name(parameters)``             |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``()``               | Initialization                     | ``type name(expression)``                 |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``{}``               | Uniform initialization (C++11)     | ``type name{expression}``                 |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``type()``           | Functional cast                    | ``new_type(expression)``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``type{}``           | Functional cast (C++11)            | ``new_type{expression}``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``[]``               | Array subscript                    | ``pointer[expression]``                   |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``.``                | Member access from object          | ``object.member_name``                    |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``->``               | Member access from object ptr      | ``object_pointer->member_name``           |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``++``               | Post-increment                     | ``lvalue++``                              |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``--``               | Post-decrement                     | ``lvalue--``                              |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``typeid``           | Run-time type information          | ``typeid(type) or typeid(expression)``    |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``const_cast``       | Cast away const                    | ``const_cast<type>(expression)``          |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``dynamic_cast``     | Run-time type-checked cast         | ``dynamic_cast<type>(expression)``        |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``reinterpret_cast`` | Cast one type to another           | ``reinterpret_cast<type>(expression)``    |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``static_cast``      | Compile-time type-checked cast     | ``static_cast<type>(expression)``         |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``sizeof...``        | Get parameter pack size            | ``sizeof...(expression)``                 |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``noexcept``         | Compile-time exception check       | ``noexcept(expression)``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``alignof``          | Get type alignment                 | ``alignof(Type)``                         |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 3 R->L    | ``+``                | Unary plus                         | ``+expression``                           |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``-``                | Unary minus                        | ``-expression``                           |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``++``               | Pre-increment                      | ``++lvalue``                              |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``--``               | Pre-decrement                      | ``--lvalue``                              |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``!``                | Logical NOT                        | ``!expression``                           |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``~``                | Bitwise NOT                        | ``~expression``                           |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``(type)``           | C-style cast                       | ``(new_type)expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``sizeof``           | Size in bytes                      | ``sizeof(type) or sizeof(expression)``    |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``co_await``         | Await asynchronous call            | ``co_await expression``                   |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``&``                | Address of                         | ``&lvalue``                               |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``*``                | Dereference                        | ``*expression``                           |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``new``              | Dynamic memory allocation          | ``new type``                              |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``new[]``            | Dynamic array allocation           | ``new type[expression]``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``delete``           | Dynamic memory deletion            | ``delete pointer``                        |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``delete[]``         | Dynamic array deletion             | ``delete[] pointer``                      |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 4 L->R    | ``->*``              | Member pointer selector            | ``object_pointer->*pointer_to_member``    |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``.*``               | Member object selector             | ``object.*pointer_to_member``             |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 5 L->R    | ``*``                | Multiplication                     | ``expression * expression``               |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``/``                | Division                           | ``expression / expression``               |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``%``                | Modulus                            | ``expression % expression``               |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 6 L->R    | ``+``                | Addition                           | ``expression + expression``               |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``-``                | Subtraction                        | ``expression - expression``               |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 7 L->R    | ``<<``               | Bitwise shift left                 | ``expression << expression``              |
+           +----------------------+-----------------------------------+--------------------------------------------+
|           | ``>>``               | Bitwise shift right                | ``expression >> expression``              |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 8 L->R    | ``<=>``              | Three-way comparison               | ``expression <=> expression``             |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 9 L->R    | ``<``                | Comparison less than               | ``expression < expression``               |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``<=``               | Comparison less than or equals     | ``expression <= expression``              |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``>``                | Comparison greater than            | ``expression > expression``               |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``>=``               | Comparison greater than or equals  | ``expression >= expression``              |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 10 L->R   | ``==``               | Equality                           | ``expression == expression``              |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``!=``               | Inequality                         | ``expression != expression``              |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 11 L->R   | ``&``                | Bitwise AND                        | ``expression & expression``               |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 12 L->R   | ``^``                | Bitwise XOR                        | ``expression ^ expression``               |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 13 L->R   | ``|``                | Bitwise OR                         | ``expression | expression``               |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 14 L->R   | ``&&``               | Logical AND                        | ``expression && expression``              |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 15 L->R   | ``||``               | Logical OR                         | ``expression || expression``              |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 16 R->L   | ``throw``            | Throw expression                   | ``throw expression``                      |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``co_yield``         | Yield expression                   | ``co_yield expression``                   |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``?:``               | Conditional                        | ``expression ? expression : expression``  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``=``                | Assignment                         | ``lvalue = expression``                   |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``*=``               | Multiplication assignment          | ``lvalue *= expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``/=``               | Division assignment                | ``lvalue /= expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``%=``               | Modulus assignment                 | ``lvalue %= expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``+=``               | Addition assignment                | ``lvalue += expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``-=``               | Subtraction assignment             | ``lvalue -= expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``<<=``              | Bitwise shift left assignment      | ``lvalue <<= expression``                 |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``>>=``              | Bitwise shift right assignment     | ``lvalue >>= expression``                 |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``&=``               | Bitwise AND assignment             | ``lvalue &= expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``|=``               | Bitwise OR assignment              | ``lvalue |= expression``                  |
+           +----------------------+------------------------------------+-------------------------------------------+
|           | ``^=``               | Bitwise XOR assignment             | ``lvalue ^= expression``                  |
+-----------+----------------------+------------------------------------+-------------------------------------------+
| 17 L->R   | ``,``                | Comma operator                     | ``expression, expression``                |
+-----------+----------------------+------------------------------------+-------------------------------------------+

Parenthesization
*****************

Parentheses in C++ have one of the highest precedence levels, so parentheses generally evaluate before whatever is inside them. This means parentheses can be used to change and force the order of application of operations.
